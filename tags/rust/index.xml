<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Akshit Dhar</title><link>/tags/rust/</link><description>Recent content in rust on Akshit Dhar</description><generator>Hugo -- gohugo.io</generator><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sun, 05 Dec 2021 17:50:05 +0530</lastBuildDate><atom:link href="/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Learning Rust Series: GREP Lite</title><link>/posts/2021/12/learning-rust-series-grep-lite/</link><pubDate>Sun, 05 Dec 2021 17:50:05 +0530</pubDate><guid>/posts/2021/12/learning-rust-series-grep-lite/</guid><description>In this post, I will be creating a simple grep-lite cli application that reads lines from a file or stdin and prints the lines that contain the search string. Since it&amp;rsquo;s a cli application, I need to pass arguments to this app.
Let&amp;rsquo;s get started.
I would be using couple of external dependencies to make this work. clap and regex.
Initialize the code. To initialize the code in rust, run cargo init.</description></item><item><title>Learning Rust Series: Code organization</title><link>/posts/2021/11/learning-rust-series-code-organization/</link><pubDate>Mon, 01 Nov 2021 10:18:22 +0530</pubDate><guid>/posts/2021/11/learning-rust-series-code-organization/</guid><description>Prerequisites: I am hoping you have Cargo and Rust installed. If not, head to the Guide.
In this series, I will be explaining things that I come across on my Rust learning journey. This is the first installment of the Learning Rust Series which will cover code organization in rust, which is different from other languages.
Code organization is an interesting topic. Whenever I start learning a new language, this is the first thing that I look at.</description></item></channel></rss>