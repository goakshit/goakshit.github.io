<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>k8s-primer on Akshit Dhar</title><link>https://goakshit.github.com/tags/k8s-primer/</link><description>Recent content in k8s-primer on Akshit Dhar</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sat, 14 Aug 2021 09:30:22 +0530</lastBuildDate><atom:link href="https://goakshit.github.com/tags/k8s-primer/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes: Core Concepts Primer - Part 5</title><link>https://goakshit.github.com/posts/2021/08/kubernetes-core-concepts-primer-part-5/</link><pubDate>Sat, 14 Aug 2021 09:30:22 +0530</pubDate><guid>https://goakshit.github.com/posts/2021/08/kubernetes-core-concepts-primer-part-5/</guid><description>What are taints and tolerances? Taints are a mechanism to add restrictions to the scheduling of pods. Tolerance is a mechanism to allow pods to be scheduled on nodes with certain conditions.
To taint a node, use kubectl taint nodes &amp;lt;NODE_NAME&amp;gt; &amp;lt;KEY&amp;gt;=&amp;lt;VALUE&amp;gt;:&amp;lt;TAINT_EFFECT&amp;gt;
There are three kinds of taint effects:
NoSchedule: This taint indicates that the node should not be used by pods. PreferNoSchedule: This taint indicates that the node should not be used by pods, but it is not guaranteed.</description></item><item><title>Kubernetes: Core Concepts Primer - Part 4</title><link>https://goakshit.github.com/posts/2021/08/kubernetes-core-concepts-primer-part-4/</link><pubDate>Sat, 07 Aug 2021 09:42:31 +0530</pubDate><guid>https://goakshit.github.com/posts/2021/08/kubernetes-core-concepts-primer-part-4/</guid><description>Security Context in Kubernetes Whenever it comes to security, always follow the The principle of least privilege (PlP) principle which states that a subject should be given only those privileges needed for it to complete its task.
Applying the same principle to kubernetes objects, we should grant a user the privileges needed to perform a task. Thats all, nothing more or nothing less. Giving root permissions to containers is not recommended.</description></item><item><title>Kubernetes: Core Concepts Primer - Part 3</title><link>https://goakshit.github.com/posts/2021/08/kubernetes-core-concepts-primer-part-3/</link><pubDate>Thu, 05 Aug 2021 18:47:58 +0530</pubDate><guid>https://goakshit.github.com/posts/2021/08/kubernetes-core-concepts-primer-part-3/</guid><description>What are ConfigMaps? A ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.
Note: ConfigMap does not provide secrecy or encryption. If the data you want to store are confidential, use a Secret rather than a ConfigMap
Imperative way to create configmaps: kubectl create configmap &amp;lt;CONFIG_NAME&amp;gt; --from-literal=&amp;lt;KEY&amp;gt;=&amp;lt;VALUE&amp;gt; kubectl create configmap &amp;lt;CONFIG_NAME&amp;gt; --from-file=&amp;lt;PATH_TO_FILE&amp;gt; Declarative way to create configmaps: # kubectl create -f &amp;lt;FILE&amp;gt; apiVersion: v1 kind: ConfigMap metadata: name: &amp;lt;CONFIG_NAME&amp;gt; data: &amp;lt;KEY&amp;gt;: &amp;lt;VALUE&amp;gt; To use config map in a pod, you need to mount it to the container.</description></item><item><title>Kubernetes: Core Concepts Primer - Part 2</title><link>https://goakshit.github.com/posts/2021/08/kubernetes-core-concepts-primer-part-2/</link><pubDate>Thu, 05 Aug 2021 18:14:56 +0530</pubDate><guid>https://goakshit.github.com/posts/2021/08/kubernetes-core-concepts-primer-part-2/</guid><description>What are ReplicaSets? A ReplicaSet&amp;rsquo;s purpose is to maintain a stable set of replica Pods running at any given time.
In short, a ReplicaSet is a monitoring and management tool for Pods that ensures a desired number of Pods are running at any given time based on the selector criteria specified in the ReplicaSet.
Example:
# Create a ReplicaSet apiVersion: apps/v1 # Api Version that made replicaset available kind: ReplicaSet # Kind of resource metadata: name: redis-rs labels: type: redis-backend spec: replicas: 3 # Desired number of replicas selector: matchLabels: type: redis-backend # Label selector used for filtering pods template: metadata: name: redis-pod labels: type: redis-backend # Label used by replicaset for identifying pods spec: containers: - name: redis image: redis Commands associated with ReplicaSet:</description></item><item><title>Kubernetes: Core Concepts Primer - Part 1</title><link>https://goakshit.github.com/posts/2021/07/kubernetes-core-concepts-primer-part-1/</link><pubDate>Thu, 29 Jul 2021 10:16:56 +0530</pubDate><guid>https://goakshit.github.com/posts/2021/07/kubernetes-core-concepts-primer-part-1/</guid><description>What is Kubernetes? Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.
Components of Kubernetes:
API Server: Acts as a interface for users, cli, and other services to interact with the k8s system ETCD: Key-Value store that stores the state, metadata etc. Scheduler: A component that distributes work to nodes in the cluster. Controller: Responsible for orchestration of the cluster.</description></item><item><title>Get Started With Minikube on MacOS</title><link>https://goakshit.github.com/posts/2021/07/get-started-with-minikube-on-macos/</link><pubDate>Wed, 28 Jul 2021 18:05:10 +0530</pubDate><guid>https://goakshit.github.com/posts/2021/07/get-started-with-minikube-on-macos/</guid><description>What is Minikube? Minikube is a tool that makes it easy to run Kubernetes locally. It is a one node cluster, where the master and worker processes are on the same machine.
Setup Minikube On MacOS To get started wiht minikube on macOS, we need to install binary for minikube which can be downloaded using the following command:
&amp;lt;!-- For x64-86 --&amp;gt; curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 sudo install minikube-darwin-amd64 /usr/local/bin/minikube &amp;lt;!</description></item></channel></rss>